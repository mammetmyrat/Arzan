// Generated by view binder compiler. Do not edit!
package afisha.arzan.tm.databinding;

import afisha.arzan.tm.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSearchDragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView backBtn;

  @NonNull
  public final TextView count;

  @NonNull
  public final SearchView editText;

  @NonNull
  public final ImageView icon;

  @NonNull
  public final MaterialCardView mainCard;

  @NonNull
  public final NestedScrollView nested;

  @NonNull
  public final RelativeLayout noResult;

  @NonNull
  public final ProgressBar progress;

  @NonNull
  public final RecyclerView rvSearch;

  @NonNull
  public final ImageView search;

  @NonNull
  public final MaterialCardView searchCard;

  @NonNull
  public final TextView title;

  @NonNull
  public final ImageView viewType;

  private FragmentSearchDragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView backBtn, @NonNull TextView count, @NonNull SearchView editText,
      @NonNull ImageView icon, @NonNull MaterialCardView mainCard, @NonNull NestedScrollView nested,
      @NonNull RelativeLayout noResult, @NonNull ProgressBar progress,
      @NonNull RecyclerView rvSearch, @NonNull ImageView search,
      @NonNull MaterialCardView searchCard, @NonNull TextView title, @NonNull ImageView viewType) {
    this.rootView = rootView;
    this.backBtn = backBtn;
    this.count = count;
    this.editText = editText;
    this.icon = icon;
    this.mainCard = mainCard;
    this.nested = nested;
    this.noResult = noResult;
    this.progress = progress;
    this.rvSearch = rvSearch;
    this.search = search;
    this.searchCard = searchCard;
    this.title = title;
    this.viewType = viewType;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchDragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchDragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search_dragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchDragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_btn;
      ImageView backBtn = rootView.findViewById(id);
      if (backBtn == null) {
        break missingId;
      }

      id = R.id.count;
      TextView count = rootView.findViewById(id);
      if (count == null) {
        break missingId;
      }

      id = R.id.editText;
      SearchView editText = rootView.findViewById(id);
      if (editText == null) {
        break missingId;
      }

      id = R.id.icon;
      ImageView icon = rootView.findViewById(id);
      if (icon == null) {
        break missingId;
      }

      id = R.id.main_card;
      MaterialCardView mainCard = rootView.findViewById(id);
      if (mainCard == null) {
        break missingId;
      }

      id = R.id.nested;
      NestedScrollView nested = rootView.findViewById(id);
      if (nested == null) {
        break missingId;
      }

      id = R.id.no_result;
      RelativeLayout noResult = rootView.findViewById(id);
      if (noResult == null) {
        break missingId;
      }

      id = R.id.progress;
      ProgressBar progress = rootView.findViewById(id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.rv_search;
      RecyclerView rvSearch = rootView.findViewById(id);
      if (rvSearch == null) {
        break missingId;
      }

      id = R.id.search;
      ImageView search = rootView.findViewById(id);
      if (search == null) {
        break missingId;
      }

      id = R.id.search_card;
      MaterialCardView searchCard = rootView.findViewById(id);
      if (searchCard == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = rootView.findViewById(id);
      if (title == null) {
        break missingId;
      }

      id = R.id.view_type;
      ImageView viewType = rootView.findViewById(id);
      if (viewType == null) {
        break missingId;
      }

      return new FragmentSearchDragmentBinding((ConstraintLayout) rootView, backBtn, count,
          editText, icon, mainCard, nested, noResult, progress, rvSearch, search, searchCard, title,
          viewType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
