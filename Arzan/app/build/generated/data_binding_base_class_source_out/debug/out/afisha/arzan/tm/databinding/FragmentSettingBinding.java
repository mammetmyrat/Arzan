// Generated by view binder compiler. Do not edit!
package afisha.arzan.tm.databinding;

import afisha.arzan.tm.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.github.florent37.expansionpanel.ExpansionHeader;
import com.github.florent37.expansionpanel.ExpansionLayout;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSettingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView backBtn;

  @NonNull
  public final TextView chooseReg;

  @NonNull
  public final RelativeLayout chooseRegion;

  @NonNull
  public final RelativeLayout darkMode;

  @NonNull
  public final SwitchCompat darkModeSwitch;

  @NonNull
  public final ImageView down;

  @NonNull
  public final RelativeLayout download;

  @NonNull
  public final RelativeLayout exit;

  @NonNull
  public final ExpansionHeader expandedHeader;

  @NonNull
  public final ExpansionLayout expandedLayout;

  @NonNull
  public final ImageView iconDarkMode;

  @NonNull
  public final ImageView iconDownload;

  @NonNull
  public final ImageView iconExit;

  @NonNull
  public final ImageView iconLang;

  @NonNull
  public final ImageView iconLocation;

  @NonNull
  public final ImageView iconPay;

  @NonNull
  public final ImageView iconRules;

  @NonNull
  public final RelativeLayout payment;

  @NonNull
  public final RelativeLayout rules;

  @NonNull
  public final LinearLayout rus;

  @NonNull
  public final LinearLayout tkm;

  @NonNull
  public final MaterialCardView toolbar;

  private FragmentSettingBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView backBtn,
      @NonNull TextView chooseReg, @NonNull RelativeLayout chooseRegion,
      @NonNull RelativeLayout darkMode, @NonNull SwitchCompat darkModeSwitch,
      @NonNull ImageView down, @NonNull RelativeLayout download, @NonNull RelativeLayout exit,
      @NonNull ExpansionHeader expandedHeader, @NonNull ExpansionLayout expandedLayout,
      @NonNull ImageView iconDarkMode, @NonNull ImageView iconDownload, @NonNull ImageView iconExit,
      @NonNull ImageView iconLang, @NonNull ImageView iconLocation, @NonNull ImageView iconPay,
      @NonNull ImageView iconRules, @NonNull RelativeLayout payment, @NonNull RelativeLayout rules,
      @NonNull LinearLayout rus, @NonNull LinearLayout tkm, @NonNull MaterialCardView toolbar) {
    this.rootView = rootView;
    this.backBtn = backBtn;
    this.chooseReg = chooseReg;
    this.chooseRegion = chooseRegion;
    this.darkMode = darkMode;
    this.darkModeSwitch = darkModeSwitch;
    this.down = down;
    this.download = download;
    this.exit = exit;
    this.expandedHeader = expandedHeader;
    this.expandedLayout = expandedLayout;
    this.iconDarkMode = iconDarkMode;
    this.iconDownload = iconDownload;
    this.iconExit = iconExit;
    this.iconLang = iconLang;
    this.iconLocation = iconLocation;
    this.iconPay = iconPay;
    this.iconRules = iconRules;
    this.payment = payment;
    this.rules = rules;
    this.rus = rus;
    this.tkm = tkm;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_btn;
      ImageView backBtn = rootView.findViewById(id);
      if (backBtn == null) {
        break missingId;
      }

      id = R.id.chooseReg;
      TextView chooseReg = rootView.findViewById(id);
      if (chooseReg == null) {
        break missingId;
      }

      id = R.id.choose_region;
      RelativeLayout chooseRegion = rootView.findViewById(id);
      if (chooseRegion == null) {
        break missingId;
      }

      id = R.id.dark_mode;
      RelativeLayout darkMode = rootView.findViewById(id);
      if (darkMode == null) {
        break missingId;
      }

      id = R.id.dark_mode_switch;
      SwitchCompat darkModeSwitch = rootView.findViewById(id);
      if (darkModeSwitch == null) {
        break missingId;
      }

      id = R.id.down;
      ImageView down = rootView.findViewById(id);
      if (down == null) {
        break missingId;
      }

      id = R.id.download;
      RelativeLayout download = rootView.findViewById(id);
      if (download == null) {
        break missingId;
      }

      id = R.id.exit;
      RelativeLayout exit = rootView.findViewById(id);
      if (exit == null) {
        break missingId;
      }

      id = R.id.expanded_header;
      ExpansionHeader expandedHeader = rootView.findViewById(id);
      if (expandedHeader == null) {
        break missingId;
      }

      id = R.id.expanded_layout;
      ExpansionLayout expandedLayout = rootView.findViewById(id);
      if (expandedLayout == null) {
        break missingId;
      }

      id = R.id.icon_dark_mode;
      ImageView iconDarkMode = rootView.findViewById(id);
      if (iconDarkMode == null) {
        break missingId;
      }

      id = R.id.icon_download;
      ImageView iconDownload = rootView.findViewById(id);
      if (iconDownload == null) {
        break missingId;
      }

      id = R.id.icon_exit;
      ImageView iconExit = rootView.findViewById(id);
      if (iconExit == null) {
        break missingId;
      }

      id = R.id.icon_lang;
      ImageView iconLang = rootView.findViewById(id);
      if (iconLang == null) {
        break missingId;
      }

      id = R.id.icon_location;
      ImageView iconLocation = rootView.findViewById(id);
      if (iconLocation == null) {
        break missingId;
      }

      id = R.id.icon_pay;
      ImageView iconPay = rootView.findViewById(id);
      if (iconPay == null) {
        break missingId;
      }

      id = R.id.icon_rules;
      ImageView iconRules = rootView.findViewById(id);
      if (iconRules == null) {
        break missingId;
      }

      id = R.id.payment;
      RelativeLayout payment = rootView.findViewById(id);
      if (payment == null) {
        break missingId;
      }

      id = R.id.rules;
      RelativeLayout rules = rootView.findViewById(id);
      if (rules == null) {
        break missingId;
      }

      id = R.id.rus;
      LinearLayout rus = rootView.findViewById(id);
      if (rus == null) {
        break missingId;
      }

      id = R.id.tkm;
      LinearLayout tkm = rootView.findViewById(id);
      if (tkm == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialCardView toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentSettingBinding((ConstraintLayout) rootView, backBtn, chooseReg,
          chooseRegion, darkMode, darkModeSwitch, down, download, exit, expandedHeader,
          expandedLayout, iconDarkMode, iconDownload, iconExit, iconLang, iconLocation, iconPay,
          iconRules, payment, rules, rus, tkm, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
