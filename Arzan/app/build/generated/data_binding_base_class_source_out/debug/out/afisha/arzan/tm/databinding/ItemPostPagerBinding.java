// Generated by view binder compiler. Do not edit!
package afisha.arzan.tm.databinding;

import afisha.arzan.tm.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewpager.widget.ViewPager;
import com.google.android.material.card.MaterialCardView;
import com.tbuonomo.viewpagerdotsindicator.WormDotsIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPostPagerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView cardTop;

  @NonNull
  public final MaterialCardView cardTop1;

  @NonNull
  public final LinearLayout countsLine;

  @NonNull
  public final TextView createdAt;

  @NonNull
  public final TextView description;

  @NonNull
  public final WormDotsIndicator dot;

  @NonNull
  public final ImageView fav;

  @NonNull
  public final ImageView like;

  @NonNull
  public final TextView likeCount;

  @NonNull
  public final View line;

  @NonNull
  public final ConstraintLayout line2;

  @NonNull
  public final View line3;

  @NonNull
  public final View line5;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final LinearLayout linearLayout3;

  @NonNull
  public final ImageView share;

  @NonNull
  public final TextView shareCount;

  @NonNull
  public final TextView title;

  @NonNull
  public final RelativeLayout titleLine;

  @NonNull
  public final TextView viewCount;

  @NonNull
  public final ViewPager viewPager;

  private ItemPostPagerBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView cardTop, @NonNull MaterialCardView cardTop1,
      @NonNull LinearLayout countsLine, @NonNull TextView createdAt, @NonNull TextView description,
      @NonNull WormDotsIndicator dot, @NonNull ImageView fav, @NonNull ImageView like,
      @NonNull TextView likeCount, @NonNull View line, @NonNull ConstraintLayout line2,
      @NonNull View line3, @NonNull View line5, @NonNull LinearLayout linearLayout,
      @NonNull LinearLayout linearLayout2, @NonNull LinearLayout linearLayout3,
      @NonNull ImageView share, @NonNull TextView shareCount, @NonNull TextView title,
      @NonNull RelativeLayout titleLine, @NonNull TextView viewCount,
      @NonNull ViewPager viewPager) {
    this.rootView = rootView;
    this.cardTop = cardTop;
    this.cardTop1 = cardTop1;
    this.countsLine = countsLine;
    this.createdAt = createdAt;
    this.description = description;
    this.dot = dot;
    this.fav = fav;
    this.like = like;
    this.likeCount = likeCount;
    this.line = line;
    this.line2 = line2;
    this.line3 = line3;
    this.line5 = line5;
    this.linearLayout = linearLayout;
    this.linearLayout2 = linearLayout2;
    this.linearLayout3 = linearLayout3;
    this.share = share;
    this.shareCount = shareCount;
    this.title = title;
    this.titleLine = titleLine;
    this.viewCount = viewCount;
    this.viewPager = viewPager;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPostPagerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPostPagerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_post_pager, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPostPagerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_top;
      MaterialCardView cardTop = rootView.findViewById(id);
      if (cardTop == null) {
        break missingId;
      }

      id = R.id.card_top1;
      MaterialCardView cardTop1 = rootView.findViewById(id);
      if (cardTop1 == null) {
        break missingId;
      }

      id = R.id.counts_line;
      LinearLayout countsLine = rootView.findViewById(id);
      if (countsLine == null) {
        break missingId;
      }

      id = R.id.createdAt;
      TextView createdAt = rootView.findViewById(id);
      if (createdAt == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = rootView.findViewById(id);
      if (description == null) {
        break missingId;
      }

      id = R.id.dot;
      WormDotsIndicator dot = rootView.findViewById(id);
      if (dot == null) {
        break missingId;
      }

      id = R.id.fav;
      ImageView fav = rootView.findViewById(id);
      if (fav == null) {
        break missingId;
      }

      id = R.id.like;
      ImageView like = rootView.findViewById(id);
      if (like == null) {
        break missingId;
      }

      id = R.id.like_count;
      TextView likeCount = rootView.findViewById(id);
      if (likeCount == null) {
        break missingId;
      }

      id = R.id.line;
      View line = rootView.findViewById(id);
      if (line == null) {
        break missingId;
      }

      id = R.id.line2;
      ConstraintLayout line2 = rootView.findViewById(id);
      if (line2 == null) {
        break missingId;
      }

      id = R.id.line3;
      View line3 = rootView.findViewById(id);
      if (line3 == null) {
        break missingId;
      }

      id = R.id.line5;
      View line5 = rootView.findViewById(id);
      if (line5 == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = rootView.findViewById(id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.linearLayout3;
      LinearLayout linearLayout3 = rootView.findViewById(id);
      if (linearLayout3 == null) {
        break missingId;
      }

      id = R.id.share;
      ImageView share = rootView.findViewById(id);
      if (share == null) {
        break missingId;
      }

      id = R.id.share_count;
      TextView shareCount = rootView.findViewById(id);
      if (shareCount == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = rootView.findViewById(id);
      if (title == null) {
        break missingId;
      }

      id = R.id.title_line;
      RelativeLayout titleLine = rootView.findViewById(id);
      if (titleLine == null) {
        break missingId;
      }

      id = R.id.view_count;
      TextView viewCount = rootView.findViewById(id);
      if (viewCount == null) {
        break missingId;
      }

      id = R.id.viewPager;
      ViewPager viewPager = rootView.findViewById(id);
      if (viewPager == null) {
        break missingId;
      }

      return new ItemPostPagerBinding((ConstraintLayout) rootView, cardTop, cardTop1, countsLine,
          createdAt, description, dot, fav, like, likeCount, line, line2, line3, line5,
          linearLayout, linearLayout2, linearLayout3, share, shareCount, title, titleLine,
          viewCount, viewPager);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
